name: Microservices CI/CD with Java 21 and Detailed K8s Deployment

on:
  pull_request:
    branches: [ main, release, develop ]
    types: [ opened, synchronize, reopened ]
  pull_request_target:
    types: [ closed ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_CLUSTER_ZONE }}
  JAVA_VERSION: '21'

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Validate PR
        run: |
          BASE="${{ github.base_ref }}"
          HEAD="${{ github.head_ref }}"
          if [[ $HEAD == feat/* && $BASE == "develop" ]]; then
            echo "Valid PR: feat to develop"
          elif [[ $BASE == "release" && $HEAD == "develop" ]] || [[ $BASE == "main" && $HEAD == "release" ]]; then
            echo "Valid PR: develop to release or release to main"
          else
            echo "Invalid PR combination"
            exit 1
          fi

  test-and-analyze:
    needs: validate-pr
    if: github.event_name == 'pull_request' && startsWith(github.head_ref, 'feat/')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: MSAgentes
            sonar_project_id: -MSAgentes
          - service: MSClientes
            sonar_project_id: -MSClientes
          - service: MSIA
            sonar_project_id: -MSIA
          - service: MSIncidentes
            sonar_project_id: -MSIncidentes
          - service: MSReporteria
            sonar_project_id: -MSReporteria
          - service: MSAuth
            sonar_project_id: -MSAuth
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Grant execute permission for mvnw
        run: chmod +x ./${{ matrix.service }}/mvnw
      - name: Build, test, and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd ${{ matrix.service }}
          ./mvnw clean verify org.jacoco:jacoco-maven-plugin:report sonar:sonar \
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}${{ matrix.sonar_project_id }} \
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.java.source=${{ env.JAVA_VERSION }} \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
          -Dsonar.verbose=true \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.pullrequest.provider=github \
          -Dsonar.pullrequest.github.repository=${{ github.repository }} \
          -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
          -Dsonar.pullrequest.branch=${{ github.head_ref }} \
          -Dsonar.pullrequest.base=${{ github.base_ref }} \
          -Dsonar.scm.provider=git \
          -Dsonar.coverage.overall.report=true \
          -Dsonar.pullrequest.coverage.mode=overall \
          -Dsonar.qualitygate.project=QualityGate
      - name: Check Quality Gate and Coverage
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd ${{ matrix.service }}

          # Esperar a que el análisis se complete completamente
          echo "Waiting for SonarCloud analysis to complete..."
          sleep 30

          # Verificar el Quality Gate
          QUALITY_GATE_STATUS=$(curl -s -u ${SONAR_TOKEN}: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}${{ matrix.sonar_project_id }}" | grep -o '"status":"[^"]*"' | cut -d':' -f2 | tr -d '"')
          echo "Quality Gate Status: $QUALITY_GATE_STATUS"

          # Obtener la cobertura consultando métricas adicionales
          COV_RESPONSE=$(curl -s -u ${SONAR_TOKEN}: "https://sonarcloud.io/api/measures/component?component=${{ secrets.SONAR_PROJECT_KEY }}${{ matrix.sonar_project_id }}&metricKeys=coverage,line_coverage,branch_coverage,coverage_line_hits_data")
          echo "Coverage response: $COV_RESPONSE"

          # Extraer cobertura directamente del informe de Jacoco
          COVERAGE=$(grep -o 'Total.*[0-9]\+%' target/site/jacoco/index.html | grep -o '[0-9]\+%' | head -1 | tr -d '%')

          # Si no se pudo obtener la cobertura, establecer a 0
          if [ -z "$COVERAGE" ]; then
            echo "No coverage value found in SonarCloud response. Setting to 0."
            COVERAGE=0
          fi

          echo "Overall coverage: ${COVERAGE}%"

          # Comparación usando bash directamente
          THRESHOLD=80
          if (( $(echo "$COVERAGE < $THRESHOLD" | awk '{print ($1 < $3)}') )); then
            echo "Coverage is below threshold ($THRESHOLD%). Current coverage: $COVERAGE%"
            exit 1
          fi

          if [ "$QUALITY_GATE_STATUS" = "ERROR" ]; then
            echo "Quality Gate failed!"
            exit 1
          fi

  build-and-push:
    needs: validate-pr
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.head_ref == 'release'
    strategy:
      matrix:
        include:
          - artifact-registry: ms-agentes
            service: MSAgentes
          - artifact-registry: ms-clientes
            service: MSClientes
          - artifact-registry: ms-ia
            service: MSIA
          - artifact-registry: ms-incidentes
            service: MSIncidentes
          - artifact-registry: ms-reporteria
            service: MSReporteria
          - artifact-registry: ms-auth
            service: MSAuth
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      - name: Grant execute permission for mvnw
        run: chmod +x ./${{ matrix.service }}/mvnw
      - name: Build with Maven
        run: |
          cd ${{ matrix.service }}
          ./mvnw package -DskipTests
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      - name: Configure Docker
        run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
      - name: Build and Push Docker image
        env:
          IMAGE: ${{ matrix.artifact-registry }}
        run: |
          cd ${{ matrix.service }}
          docker build --build-arg JAVA_VERSION=${{ env.JAVA_VERSION }} -t us-central1-docker.pkg.dev/$PROJECT_ID/microservices/$IMAGE:$GITHUB_SHA .
          docker push us-central1-docker.pkg.dev/$PROJECT_ID/microservices/$IMAGE:$GITHUB_SHA

  deploy-backend-config:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.head_ref == 'release'
    steps:
      - uses: actions/checkout@v3
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      - name: Install gke-gcloud-auth-plugin
        run: |
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update
          sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin
      - name: Get GKE Credentials
        run: gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE
      - name: Apply BackendConfig
        run: |
          kubectl apply -f k8s/abcall-backend-config.yaml

  deploy-services:
    needs: deploy-backend-config
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.head_ref == 'release'
    strategy:
      matrix:
        include:
          - service: MSAgentes
            artifact-registry: ms-agentes
            service-name: ms-abcall-agentes
          - service: MSClientes
            artifact-registry: ms-clientes
            service-name: ms-abcall-clientes
          - service: MSIA
            artifact-registry: ms-ia
            service-name: ms-abcall-ia
          - service: MSIncidentes
            artifact-registry: ms-incidentes
            service-name: ms-abcall-incidentes
          - service: MSReporteria
            artifact-registry: ms-reporteria
            service-name: ms-abcall-reporteria
          - service: MSAuth
            artifact-registry: ms-auth
            service-name: ms-abcall-auth
    steps:
      - uses: actions/checkout@v3
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      - name: Install gke-gcloud-auth-plugin
        run: |
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update
          sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin
      - name: Get GKE Credentials with Timeout
        run: |
          timeout 1200s gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE || echo "Command timed out after 1200 seconds"
      - name: Update image in Kubernetes manifest
        run: |
          sed -i 's|IMAGE_TO_REPLACE|us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/microservices/${{ matrix.artifact-registry }}:${{ github.sha }}|g' ${{ matrix.service }}/k8s/${{ matrix.service-name }}.yaml
      - name: Deploy Module to GKE
        run: |
          kubectl apply -f ${{ matrix.service }}/k8s/${{ matrix.service-name }}.yaml
      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/${{ matrix.service-name }}-deployment
          kubectl get services -o wide | grep ${{ matrix.service-name }}-service
          kubectl get hpa ${{ matrix.service-name }}-hpa

  update-ingress:
    needs: deploy-services
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.head_ref == 'release'
    steps:
      - uses: actions/checkout@v3
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      - name: Install gke-gcloud-auth-plugin
        run: |
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update
          sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin
      - name: Get GKE Credentials
        run: gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE
      - name: Update and Apply Ingress
        run: |
          kubectl apply -f k8s/abcall-ingress.yaml
      - name: Verify Ingress
        run: |
          kubectl get ingress
          kubectl describe ingress abcall-ingress